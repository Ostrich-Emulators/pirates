openapi: "3.0.0"
info:
  version: 1.0.0
  title: OS-EM Pirate Game
basePath: /pirates
tags:
- internalGame
- player
- ship
paths:
  /ships:
    get:
      summary: Get all ships
      operationId: getAllShips
      tags:
      - ship
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ship"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}:
    get:
      summary: Get one ship
      operationId: getShip
      parameters:
      - name: shipId
        in: path
        required: true
        description: The ship id
        schema:
          type: string
      tags:
      - ship
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ship"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}/course:
    post:
      summary: Sets a ship's course
      operationId: sailTo
      tags:
      - ship
      parameters:
      - name: shipId
        in: path
        required: true
        description: The ship
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Location"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ship"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}/fire:
    post:
      summary: fire at the target ship
      operationId: fire
      tags:
      - ship
      parameters:
      - name: shipId
        in: path
        required: true
        description: The firing ship
        schema:
          type: string
      requestBody:
        required: true
        description: The ship being fired at
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Targetting"
      responses:
        '200':
          description: success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}/board:
    post:
      summary: attempt to board another ship
      operationId: board
      tags:
      - ship
      parameters:
      - name: shipId
        in: path
        required: true
        description: The ship doing the boarding
        schema:
          type: string
      requestBody:
        required: true
        description: The ship being boarded
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Targetting"
      responses:
        '200':
          description: success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}/undock:
    post:
      summary: leave a city
      operationId: undock
      tags:
      - ship
      parameters:
      - name: shipId
        in: path
        required: true
        description: The ship undocking
        schema:
          type: string
      responses:
        '200':
          description: success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /ships/{shipId}/buy:
    post:
      summary: leave a city
      operationId: buy
      tags:
      - ship
      parameters:
      - name: shipId
        in: path
        required: true
        description: The ship doing the buying
        schema:
          type: string
      requestBody:
        required: true
        description: what is getting purchased
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Purchase"
      responses:
        '200':
          description: success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
  /game/status/{playerId}:
    get:
      summary: Get current game status
      operationId: getStatus
      parameters:
      - name: playerId
        in: path
        required: true
        description: The player id
        schema:
          type: string
      tags:
      - internalGame
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
    
  /players:
    get:
      summary: Get all players
      operationId: getAll
      tags:
      - player
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Player"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
    put:
      summary: Create a new player
      operationId: join
      tags:
      - internalGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinData"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerAndShip"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
    post:
      summary: Rejoin a game
      operationId: rejoin
      tags:
      - internalGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JoinData"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerAndShip"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string
security:
  - bearerAuth: []
components:
  securitySchemas:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
#############################################################
# SCHEMAS
#############################################################
  schemas:
    Player:
      type: object
      required:
        - id
        - name
        - female
        - color
        - avatar
        - ai
      properties:
        id:
          type: string
        name:
          type: string
        female:
          type: boolean
        avatar:
          type: number
        color:
          type: string
        ai:
          type: boolean
    Location:
      type: object
      required:
        - x
        - y
      properties:
        x:
          type: number
        y:
          type: number
    Targetting:
      type: object
      required:
        - targetid
      properties:
        targetid:
          type: string
    Crew:
      type: object
      required:
        - count
        - meleeSkill
        - sailingSkill
      properties:
        count:
          type: number
        meleeSkill:
          type: number
        sailingSkill:
          type: number
    CannonBase:
      type: object
      required:
        - firepower
        - reloadspeed
        - range
      properties:
        firepower:
          type: number
        reloadspeed:
          type: number
        range:
          type: number
    ShipCannon:
      allOf:
        - $ref: '#/components/schemas/CannonBase'
        - type: object
          required:
            - count
          properties:
            count:
              type: number
            reloading:
              type: number
    CityCannon:
      allOf:
        - $ref: '#/components/schemas/CannonBase'
        - type: object
          required:
            - cost
          properties:
            cost:
              type: number
    City:
      type: object
      properties:
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        melee:
          type: number
        sailing:
          type: number
        ammo:
          type: number
        hull:
          type: number
        sail:
          type: number
        cannon:
          type: array
          items:
            $ref: '#/components/schemas/CityCannon'
    Course:
      type: object
      required:
        - dstx
        - dsty
        - speedx
        - speedy
      properties:
        dstx:
          type: number
        dsty:
          type: number
        speedx:
          type: number
        speedy:
          type: number
    Ship:
      type: object
      required:
        - id
        - name
        - location
        - course
        - crew
        - type
      properties:
        id:
          type: string
        ownerid:
          type: string
        type:
          $ref: '#/components/schemas/ShipType'
        speed:
          type: number
        manueverability:
          type: number
        hullStrength:
          type: number
        sailQuality:
          type: number
        food:
          type: number
        ammo:
          type: number
        storage:
          type: number
        crew:
          $ref: '#/components/schemas/Crew'
        cannons:
          $ref: '#/components/schemas/ShipCannon'
        name:
          type: string
        captain:
          type: string
        gold:
          type: number
        location:
          $ref: '#/components/schemas/Location'
        course:
          $ref: '#/components/schemas/Course'
        anchored:
          type: boolean
        docked:
          $ref: '#/components/schemas/City'
    ShipType:
      type: string
      enum: [BIG, MEDIUM, SMALL]
    BoardCode:
      type: string
      enum: [REPELLED, OVERRUN, DRAW, ATTACKER_SUCCESS, DEFENDER_SUCCESS]
    HitCode:
      type: string
      enum: [CANNON_EXPLODED, HIT_HULL, HIT_SAIL, HIT_SAILOR, HIT_CANNON, MISSED, OUT_OF_RANGE]
    BoardResult:
      type: object
      requried:
        - attacker
        - attackee
        - code
      properties:
        attacker:
          $ref: '#/components/schemas/Ship'
        attackee:
          $ref: '#/components/schemas/Ship'
        code:
          $ref: '#/components/schemas/BoardCode'
        gold:
          type: number
        ammo:
          type: number
        food:
          type: number
        crew:
          $ref: '#/components/schemas/Crew'
    CombatResult:
      type: object
      required:
        - attacker
        - attackee
        - hitcodes
      properties:
        attacker:
          $ref: '#/components/schemas/Ship'
        attackee:
          $ref: '#/components/schemas/Ship'
        hitcodes:
          type: array
          items:
            $ref: '#/components/schemas/HitCode'
        hits:
          type: number
        misses:
          type: number
    StatusResponse:
      type: object
      required:
        - messages
        - ships
        - poolloc
        - monsterloc
        - combat
        - board
      properties:
        messages:
          type: array
          items:
            type: string
        ships:
          type: array
          items:
            $ref: '#/components/schemas/Ship'
        poolloc:
          $ref: '#/components/schemas/Location'
        monsterloc:
          $ref: '#/components/schemas/Location'
        combat:
          type: array
          items:
            $ref: '#/components/schemas/CombatResult'
        board:
          type: array
          items:
            $ref: '#/components/schemas/BoardResult'
    PlayerAndShip:
      type: object
      required:
        - player
        - ship
      properties:
        player:
          $ref: '#/components/schemas/Player'
        ship:
          $ref: '#/components/schemas/Ship'
    JoinData:
      type: object
      required:
        - captain
        - female
        - shipname
        - color
        - avatar
      properties:
        captain:
          type: string
        female:
          type: boolean
        avatar:
          type: number
        shipname:
          type: string
        color:
          type: string
    ShipDefinition:
      type: object
      required:
        - maxcannons
        - crewsize
        - storage
        - speed
        - manueverability
        - hull
      properties:
        maxcannons:
          type: number
        crewsize:
          type: number
        storage:
          type: number
        speed:
          type: number
        manueverability:
          type: number
        hull:
          type: number
    ActionPair:
      type: object
      required:
        - one
        - two
      properties:
        one:
          $ref: '#/components/schemas/Ship'
        two:
          $ref: '#/components/schemas/Ship'
    PurchaseCode:
      type: string
      enum: [MELEE, SAILING, HULL, SAIL, AMMO, CANNON]    
    Purchase:
      type: object
      required:
        - cityname
        - item
      properties:
        cityname:
          type: string
        item:
          $ref: '#/components/schemas/PurchaseCode'
        extra_n:
          type: number
        extra_s:
          type: string

